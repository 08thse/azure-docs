### YamlMime:FAQ
metadata:
  title: Frequently asked questions - Azure Blob Storage | Microsoft Docs
  description: This article provides a list of frequently asked questions (FAQ) for Azure Blob Storage. 
  ms.topic: faq
  ms.service: azure-storage
  ms.date: 08/10/2023
  ms.author: normesta
  author: normesta
title: Azure Blob Storage frequently asked questions
summary: |
  This article provides a list of frequently asked questions (FAQ) for Azure Blob Storage.</br></br>  

sections:
  - name: Lifecycle management policies
    questions:
      - question: |
          I created a new policy. Why do the actions not run immediately?
        answer: |
          The platform runs the lifecycle policy once a day. Once you configure a policy, it can take up to 24 hours to go into effect. Once the policy is in effect, it could take up to 24 hours for some actions to run for the first time.
      - question: |
          If I update an existing policy, how long does it take for the actions to run?
        answer: |
          The updated policy takes up to 24 hours to go into effect. Once the policy is in effect, it could take up to 24 hours for the actions to run. Therefore, the policy actions may take up to 48 hours to complete. If the update is to disable or delete a rule, and enableAutoTierToHotFromCool was used, auto-tiering to Hot tier will still happen. For example, set a rule including enableAutoTierToHotFromCool based on last access. If the rule is disabled/deleted, and a blob is currently in cool or cold and then accessed, it will move back to Hot as that is applied on access outside of lifecycle management. The blob won't then move from hot to cool or cold given the lifecycle management rule is disabled/deleted. The only way to prevent autoTierToHotFromCool is to turn off last access time tracking.  
      - question: |
          The run completes but doesn't move or delete some blobs
        answer: |
          Depending on the size and the number of objects that are in a storage account, more than one run might be required to process all of the objects. You can also check the storage resource logs to see if the operations are being performed by the lifecycle management policy.  
      - question: |
          I don't see capacity changes even though the policy is executing and deleting the blobs
        answer: |
          Check to see if data protection features such as soft delete or versioning are enabled on the storage account. Even if the policy is deleting the blobs, those blobs might still exist in a soft deleted state or as an older version depending on how these features are configured.  
      - question: |
          I rehydrated an archived blob. How do I prevent it from being moved back to the Archive tier temporarily?
        answer: |
          If there's a lifecycle management policy in effect for the storage account, then rehydrating a blob by changing its tier can result in a scenario where the lifecycle policy moves the blob back to the archive tier. This can happen if the last modified time, creation time, or last access time is beyond the threshold set for the policy. There are three ways to prevent this from happening:

          - Add the `daysAfterLastTierChangeGreaterThan` condition to the tierToArchive action of the policy. This condition applies only to the last modified time. See [Use lifecycle management policies to archive blobs](archive-blob.md#use-lifecycle-management-policies-to-archive-blobs).

          - Disable the rule that affects this blob temporarily to prevent it from being archived again. Re-enable the rule when the blob can be safely moved back to archive tier. 

          - If the blob needs to stay in the hot, cool, or cold tier permanently, copy the blob to another location where the lifecycle manage policy isn't in effect.  
      - question: |
          The blob prefix match string didn't apply the policy to the expected blobs
        answer: |
          The blob prefix match field of a policy is a full or partial blob path, which is used to match the blobs you want the policy actions to apply to. The path must start with the container name. If no prefix match is specified, then the policy will apply to all the blobs in the storage account. The format of the prefix match string is `[container name]/[blob name]`.  
          Keep in mind the following points about the prefix match string:

          - A prefix match string like *container1/* applies to all blobs in the container named *container1*. A prefix match string of *container1*, without the trailing forward slash character (/), applies to all blobs in all containers where the container name begins with the string *container1*. The prefix will match containers named *container11*, *container1234*, *container1ab*, and so on.
          - A prefix match string of *container1/sub1/* applies to all blobs in the container named *container1* that begin with the string *sub1/*. For example, the prefix will match blobs named *container1/sub1/test.txt* or *container1/sub1/sub2/test.txt*.
          - The asterisk character `*` is a valid character in a blob name. If the asterisk character is used in a prefix, then the prefix will match blobs with an asterisk in their names. The asterisk doesn't function as a wildcard character.
          - The question mark character `?` is a valid character in a blob name. If the question mark character is used in a prefix, then the prefix will match blobs with a question mark in their names. The question mark doesn't function as a wildcard character.
          - The prefix match considers only positive (=) logical comparisons. Negative (!=) logical comparisons are ignored.
      - question: |
          Is there a way to identify the time at which the policy will be executing?
        answer: |
          Unfortunately, there's no way to track the time at which the policy will be executing, as it's a background scheduling process. However, the platform will run the policy once per day.     
  - name: Multiple inventory file output
    questions:
      - question: |
          What has changed with respect to the number of inventory files produced?
        answer: |
          Blob Inventory report produces three types of files. See [Inventory files](blob-inventory.md#inventory-files). Existing customers using blob inventory might see a change in the number of inventory files, from one file to multiple files. Today, we already have manifest file that provides the list of files. This behavior remains unchanged, so these files are listed in the manifest file.    
      - question: |
          Why was the change made?
        answer: |
          The change was implemented to enhance blob inventory performance, particularly for large storage accounts containing over five million objects. Now, results are written in parallel to multiple files, eliminating the bottleneck of using a single inventory file. This change was prompted by customer feedback, as they reported difficulties in opening and working with the excessively large single inventory file.
      - question: |
          How does this change affect me as a user?
        answer: |
          As a user, this change has a positive impact on your experience with blob inventory runs. It's expected to enhance performance and reduce the overall running time. However, to fully benefit from this improvement, you must ensure that your code is updated to process multiple results files instead of just one. This adjustment aligns your code with the new approach and optimizes the handling of inventory data.  
      - question: |
          Is my existing data affected?
        answer: |
          No, existing data isn't affected. Only new blob inventory results have multiple inventory files.  
      - question: |
          Will there be any downtime or service interruptions?
        answer: |
          No, the change happens seamlessly.  
      - question: |
          Is there anything I need to do differently now?
        answer: |
          Your required actions depend on how you currently process blob inventory results:

          - If your current processing assumes a single inventory results file, then you need to modify your code to accommodate multiple inventory results files.

          - However, if your current processing involves reading the list of results files from the manifest file, there's no need to make any changes to how you process the results. The existing approach continues to work seamlessly with the updated feature.  
      - question: |
          Can I revert to the previous behavior if I don't like the change?
        answer: |
          This isn't recommended, but it's possible. Please work through your support channels to ask to turn off this feature.  
      - question: |
          How can I provide feedback or report issues related to the changes?
        answer: |
          Please work through your current account team and support channels.  
      - question: |
          When will this change take effect?
        answer: |
          This change will start gradual rollout starting September 1, 2023.  

additionalContent: |

  ## Next steps
  
  You can learn more about Azure Blob Storage by visiting the following links:

  - [Introduction to Azure Storage](../common/storage-introduction.md)
  - [What is Azure Blob storage](storage-blobs-overview.md)