### YamlMime:FAQ
metadata:
  title: Azure Resource Manager deployment FAQ for Azure Functions
  description: See the frequently asked questions when deploying your Azure Functions resources by using Azure Resources Manager and Bicep templates.
  ms.service: azure-functions
  ms.topic: faq 
  ms.date: 02/07/2023
title: Azure Resource Manager deployment FAQ for Azure Functions
summary: |
  This article provides answers to frequently asked questions about using Bicep files and Azure Resource Manager templates to deploy the resources required by a function app. For an introduction, see [Automate resource deployment for your function app in Azure Functions](functions-infrastructure-as-code.md). 

sections:
  - name: Ignored
    questions:
      - question: When is dependsOn required?
        answer: |
          Dependencies are required for resources that are deployed within the same template, especially when the order of creation matters. For Example: If function app site and ZipDeploy extension are being deployed in the same template, then it is important to declare that the ZipDeploy resource depends on the site. Because only after the creation of the site, we want to create ZipDeploy extension for deployment. Here is more information on [dependsOn](Best-Practices-Guide#dependson).
          
      - question: Can I use the WEBSITE_RUN_FROM_PACKAGE=1 setting with MSDeploy?
        answer: |
          No. The appSetting `WEBSITE_RUN_FROM_PACKAGE=1` is only supported by [zip deployment](deployment-zip-push.md) and not with MSDeploy. The `ZipDeploy` extension with the appSetting `WEBSITE_RUN_FROM_PACKAGE=1` is the recommended path of deployment, except for Linux Consumption plan. For Linux Comsumption plan, please remove MSDeploy extension and remove ZipDeploy extension. Then add the app setting `WEBSITE_RUN_FROM_PACKAGE = packageURL` for deployment in ARM Template.

      - question: Why MSDeploy extension is not working with Linux?.
        answer: |
          + MSDeploy is not supported with Linux, it is Windows only. MSDeploy is not a recommended deployment mechanism for Azure Functions. + For Premium and Dedicated plan on Linux, use ZipDeploy extension and set the appSetting `WEBSITE_RUN_FROM_PACKAGE=1`. + For Linux Comsumption plan, please remove MSDeploy extension and remove ZipDeploy extension. Then add the app setting `WEBSITE_RUN_FROM_PACKAGE = packageURL` for deployment in ARM Template.

      - question: Why ZipDeploy extension is not working with Linux Consumption plan?
        answer: |
          + ZipDeploy extension and the appSetting `WEBSITE_RUN_FROM_PACKAGE=1` is not supported with Linux Consumption plan. It is the recommended deployment path for all other OS and SKU. + For Linux Comsumption plan, please add the app setting `WEBSITE_RUN_FROM_PACKAGE = packageURL` for deployment in ARM Template.

      - question: Why `WEBSITE_RUN_FROM_PACKAGE=1` is not working for function app with Consumption plan on Linux?
        answer: See the previous answer.

      - question: Why remote build is not working on Linux after setting SCM_DO_BUILD_DURING_DEPLOYMENT=true?
        answer: |
          To enable the remote build processes on Linux, please verify the following app settings (you can simply verify configurations on the Azure portal): 
          
          + `WEBSITE_RUN_FROM_PACKAGE=0` or WEBSITE_RUN_FROM_PACKAGE app setting removed
          + `SCM_DO_BUILD_DURING_DEPLOYMENT=true`

          For Functions app on Linux, `ENABLE_ORYX_BUILD=true` is set by default. If this build does not work for you e.g. for dotnet or java app, then set `ENABLE_ORYX_BUILD=false`. 

      - question: My deployment was successful, but I'm not seeing the latest code on the site?
        answer: |
          The WEBSITE_RUN_FROM_PACKAGE setting should be made consistent between ARM template and the deployment task to avoid unexpected issues around file updates when deploying. For example, if using "Run From Package" in the DevOps deployment task, make sure the ARM template also uses WEBSITE_RUN_FROM_PACKAGE = 1, and if not using "Run From Package" in the DevOps deployment task, make sure the ARM template uses WEBSITE_RUN_FROM_PACKAGE = 0.

          When setup DevOps pipeline with RunFromPackage option, for every run, DevOps will automatically add WEBSITE_RUN_FROM_PACKAGE=1 to the current AppSettings collection. As part of the pipeline, user often provides script/template to create/update the site and its AppSettings. If user misses to include this as well, it creates a situation as if the setting is removed and re-added back for every run. This leads to file system being changed during deployment and a common source of transient issue if not missing deployed content altogether. Therefore, make sure the template or script include WEBSITE_RUN_FROM_PACKAGE=1 if DevOps's RunFromPackage is selected and vice versa.

      - question: Why isn't my function app starting?
        answer: |
          Changing or removing certain application settings can prevent your function app from starting. To troubleshoot this issue, see [Storage account application settings were deleted](functions-recover-storage-account.md#storage-account-application-settings-were-deleted). To learn about other issues that can prevent your site from starting, see [Troubleshoot error: "Azure Functions Runtime is unreachable"](functions-recover-storage-account.md) 

      - question: Why does my function app restart during a slot swap deployment?
        answer: |
          + Set WEBSITE_SKIP_ALL_BINDINGS_IN_APPHOST_CONFIG to 1 to skip all bindings in applicationHost.config. If your app triggers a restart because applicationHost.config is updated with the swapped hostnames of the slots, set this variable to true to avoid a restart of this kind. It is set to avoid restart during deployment slot swap if there was a restart due to the addition of the bindings. + If you are running a Windows Communication Foundation (WCF) app, do not set this variable. 
          
      - question: Why does my function app become unavailable breifly during a slot swap?
        answer: See the previous answer.

      - question: How do I deploy from a deployment slot using templates?
        answer: |
          You can create a function app with a production slot and a deployment slot by using this [Azure Function App with a Deployment Slot](https://github.com/Azure-Samples/function-app-arm-templates/tree/main/function-app-deployment-slot) template. To learn about how to perform the swap by using templates, see [Automate with Resource Manager templates](../app-service/deploy-staging-slots.md#automate-with-resource-manager-templates). 

      - question: Why can't I access my storage account after restricting access to a virtual network?
        answer: |
          + If you are restricting access to the storage account through the private endpoints, you will not be able to access the data storage in the storage account through the portal or otherwise. + You can give access to your secured IP address or virtual network for the data storage in the storage account, by [Managing the default network access rule](https://docs.microsoft.com/en-us/azure/storage/common/storage-network-security?tabs=azure-portal#change-the-default-network-access-rule)

      - question: After restricting storage account to a virtual network, why do I get 503 error when trying to reach the function app?
        answer: |
          Verify and update the Application Settings under Configuration for the function app to the following:

          |Setting name|Value|Comment|
          |----------------|-----------|-----------|
          |AzureWebJobsStorage|Storage connection string|This is the connection string for a secured storage account.|

          Verify and update these App setting for Premium plan or Consumption plan on Windows and Premium plan on Linux:

          |Setting name|Value|Comment|
          |----------------|-----------|-----------|
          |WEBSITE_CONTENTAZUREFILECONNECTIONSTRING|Storage connection string|This is the connection string for a secured storage account.|
          |WEBSITE_CONTENTSHARE|File share|The name of the file share created in the secured storage account where the project deployment files reside.|

      - question: What application settings are required for a virtual network?
        answer: |
          WEBSITE_CONTENTOVERVNET = 1
          + A value of 1 enables your function app to scale when you have your storage account restricted to a virtual network. You should enable this setting when restricting your storage account to a virtual network. To learn more, see [Restrict your storage account to a virtual network](https://docs.microsoft.com/en-us/azure/azure-functions/configure-networking-how-to#restrict-your-storage-account-to-a-virtual-network).
          + Supported on Premium and Dedicated (App Service) plans (Standard and higher). Not supported when running on a Consumption plan. 

          WEBSITE_VNET_ROUTE_ALL = 1
          + A setting value of 1 indicates that all traffic is routed through the virtual network. Indicates whether all outbound traffic from the app is routed through the virtual network.
          + You need this setting when using features of [Regional virtual network integration](https://docs.microsoft.com/en-us/azure/azure-functions/functions-networking-options#regional-virtual-network-integration). 
          + It's also used when a [virtual network NAT gateway is used to define a static outbound IP address](https://docs.microsoft.com/en-us/azure/azure-functions/functions-how-to-use-nat-gateway).

      - question: Why ARM template deletes and replace application settings for a function app?
        answer: |
          This is an expected behavior that the ARM template will delete the existing app settings and replace the app settings for a function app based on the app settings present in the ARM template. The API requires the payload to contains all necessary settings which will replace the existing one entirely. There is no partial remove or patch support with existing AppSettings. For instance, if one you want to add a new setting, one needs to get existing set, add to that collection and update as a whole.

          Therefore, please include all of the existing app settings in the template to preserve them. This does not apply only if the app settings block is not defined in the current template.

      - question: When to set WEBSITE_NODE_DEFAULT_VERSION app setting?
        answer: |
          + This setting is for Windows only. This setting is only needed when using the node language stack to specify which node.js version to use. For Example:

          NOTE: Please include rest of the existing app settings in the template to preserve them.

          ```json
          "properties": {
              "siteConfig": {
                  "appSettings": [
                      {
                          "name": "WEBSITE_NODE_DEFAULT_VERSION",
                          "value": "~14"
                      }
                  ]
              }
          }
          ```
      - question: Why WEBSITE_NODE_DEFAULT_VERSION is not working in Linux?
        answer: |
          - `WEBSITE_NODE_DEFAULT_VERSION` is Windows only property. [Click here ](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings#website_node_default_version) for more information. 
          - Linux apps should use `LinuxFxVersion` setting. 

      - question: How `linuxFxVersion` is added in an ARM template?
        answer: |
          - Linux apps should include a `linuxFxVersion` property under `siteConfig`. If you are just deploying code, the value for this is determined by your desired runtime stack in the format of `runtime|runtimeVersion`.
          - If you are deploying a custom container image, you must specify it with `linuxFxVersion` and include configuration that allows your image to be pulled, as in Web App for Containers. Also, set `WEBSITES_ENABLE_APP_SERVICE_STORAGE` to `false`, since your app content is provided in the container itself:
          - More information about setting `linuxFxVersion` [using ARM template ](https://docs.microsoft.com/en-us/azure/azure-functions/functions-infrastructure-as-code#create-a-function-app-2) and [using Azure CLI](https://docs.microsoft.com/en-us/azure/azure-functions/set-runtime-version?tabs=azurecli#manual-version-updates-on-linux) is available in the documentation. 

      - question: When to enable `alwaysOn` site config?
        answer: |
          - If you run on an **App Service plan**, you should enable the `"alwaysOn": true` setting under site config so that your function app runs correctly. On an App Service plan, the functions runtime goes idle after a few minutes of inactivity, so only HTTP triggers will "wake up" your functions. The Always on setting is available only on an App Service plan.
          - When running in a Consumption Plan or Premium Plan you should NOT enable Always On. On a Consumption plan the platform activates function apps automatically and on a Premium plan the platform keeps your desired number of pre-warmed instances always on automatically.

      - question: Why we need to enable Always On when running on dedicated App Service Plan?
        answer: See the previous answer.

additionalContent: |
    ## Next steps

    To learn more, see [Automate resource deployments for Azure Functions](./functions-infrastructure-as-code.md).

